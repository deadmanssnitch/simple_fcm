# frozen_string_literal: true

module SimpleFCM
  # Error is the root class for all errors generated by SimpleFCM.
  class Error < StandardError; end

  # API errors are raised when there is an issue making a request to the
  # Firebase Cloud Messaging API.
  #
  # @see https://firebase.google.com/docs/reference/fcm/rest/v1/ErrorCode
  class APIError < Error
    attr_reader :code
    attr_reader :status
    attr_reader :details

    def initialize(response)
      if response.body.is_a?(String)
        @code = response.status

        super("FCM returned #{response.status}: #{response.body}")
      else
        payload = response.body[:error]

        @code = payload[:code]
        @status = payload[:status]
        @details = payload[:details]

        super(payload[:message])
      end
    end

    def retriable?
      true
    end

    # exception is called instead of `new` when using the form:
    #   raise SimpleFCM::APIError, response
    #
    # @param response [Faraday::Response]
    def self.exception(response)
      klass =
        case response.status
        when 400 then InvalidArgumentError
        when 401 then ThirdPartyAuthenticationError
        when 403 then SenderMismatchError
        when 404 then UnregisteredError
        when 429 then QuotaExceededError
        when 500 then InternalServerError
        when 503 then ServiceUnavailableError
        else
          APIError
        end

      klass.new(response)
    end
  end

  # InvalidArgumentError is raised when an invalid parameter or request payload
  # was sent to Firebase Cloud Messaging.
  #
  # @see https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages/send
  # @see https://firebase.google.com/docs/reference/fcm/rest/v1/ErrorCode
  class InvalidArgumentError < APIError
    def retriable?
      false
    end
  end

  # ThirdPartyAuthenticationError is raised when sending a message targeted at
  # an iOS device or sending a web push registration and the third party
  # credentials are incorrect.
  #
  # @see https://firebase.google.com/docs/reference/fcm/rest/v1/ErrorCode
  class ThirdPartyAuthenticationError < APIError
    def retriable?
      false
    end
  end

  # SenderMismatchError is raised when the given Sender ID is not tied to the
  # registration token the message is being sent to.
  #
  # @see https://firebase.google.com/docs/reference/fcm/rest/v1/ErrorCode
  class SenderMismatchError < APIError
    def retriable?
      false
    end
  end

  # UnregisteredError is raised when the given device token is no longer valid.
  #
  # @see https://firebase.google.com/docs/reference/fcm/rest/v1/ErrorCode
  class UnregisteredError < APIError
    def retriable?
      false
    end
  end

  # QuotaExceededError is raised when the quota for sending push notifications
  # to either a device or topic has been exceeded. Firebase recommends using an
  # exponential backoff with a minimum delay of 1 minute before retrying the
  # message.
  #
  # @see https://firebase.google.com/docs/reference/fcm/rest/v1/ErrorCode
  class QuotaExceededError < APIError
    def retriable?
      true
    end
  end

  # InternalServerError is raised when Firebase encountered an unknown internal
  # error.
  #
  # @see https://firebase.google.com/docs/reference/fcm/rest/v1/ErrorCode
  class InternalServerError < APIError
    def retriable?
      true
    end
  end

  # ServiceUnavailableError is raised when Firebase's push notification
  # services are overloaded in some way.
  #
  # @see https://firebase.google.com/docs/reference/fcm/rest/v1/ErrorCode
  class ServiceUnavailableError < APIError
    def retriable?
      true
    end
  end
end
